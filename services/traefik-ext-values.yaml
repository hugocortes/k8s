## Default values for Traefik
image: traefik
imageTag: 1.7.2
## can switch the service type to NodePort if required
serviceType: LoadBalancer
loadBalancerIP: "192.168.2.100"
# loadBalancerSourceRanges: []
whiteListSourceRange: []
externalTrafficPolicy: Local
replicas: 3

podDisruptionBudget: {}
  # maxUnavailable: 1
  # minAvailable: 2

# rootCAs: []

cpuRequest: 100m
memoryRequest: 100Mi
cpuLimit: 200m
memoryLimit: 200Mi
debug:
  enabled: false

deploymentStrategy: {}
  # rollingUpdate:
  #   maxSurge: 1
  #   maxUnavailable: 0
  # type: RollingUpdate

nodeSelector: {}
  # key: value
affinity: {}
  # key: value
tolerations: []
# - key: "key"
#   operator: "Equal|Exists"
#   value: "value"
#   effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"
## Kubernetes ingress filters
kubernetes:
  # endpoint:
  # namespaces:
  # - default
  #labelSelector:
  ingressClass: traefik-external
  # ingressEndpoint:
  #   hostname: "localhost"
  #   ip: "127.0.0.1"
  #   publishedService: "namespace/servicename"
proxyProtocol:
  enabled: false
  # trustedIPs is required when enabled
  trustedIPs: []
  # - 10.0.0.0/8
forwardedHeaders:
  enabled: false
  # trustedIPs is required when enabled
  trustedIPs: []
  # - 10.0.0.0/8
ssl:
  enabled: true
  enforced: true

kvprovider:
  storeAcme: true
  importAcme: false

  consul:
    endpoint: consul:8500
    watch: true
    prefix: traefik-external

acme:
  enabled: true
  email: contact@hugocortes.me
  onHostRule: true
  staging: false
  logging: true
  challengeType: http-01
  persistence:
    enabled: true
    annotations: {}
    accessMode: ReadWriteOnce
    size: 1Gi
dashboard:
  enabled: true
  domain: traefik-ext.internal.hugocortes.me
  service: {}
    # annotations:
    #   key: value
  ingress: 
    annotations:
      kubernetes.io/ingress.class: traefik-internal
      traefik.frontend.rule.type: PathPrefix
    # labels:
    #   key: value
  auth: {}
    # basic:
    #   username: password
  statistics: {}
    ## Number of recent errors to show in the ‘Health’ tab
    # recentErrors:
service:
  # annotations:
  #   key: value
  # labels:
  #   key: value
  ## Further config for service of type NodePort
  ## Default config with empty string "" will assign a dynamic
  ## nodePort to http and https ports
  nodePorts:
    http: ""
    https: ""
  ## If static nodePort configuration is required it can be enabled as below
  ## Configure ports in allowable range (eg. 30000 - 32767 on minikube)
  # nodePorts:
  #   http: 30080
  #   https: 30443
gzip:
  enabled: true
traefikLogFormat: json
accessLogs:
  enabled: false
  ## Path to the access logs file. If not provided, Traefik defaults it to stdout.
  # filePath: ""
  format: common  # choices are: common, json
  ## for JSON logging, finer-grained control over what is logged. Fields can be
  ## retained or dropped, and request headers can be retained, dropped or redacted
  fields:
    # choices are keep, drop
    defaultMode: keep
    names: {}
      # ClientUsername: drop
    headers:
      # choices are keep, drop, redact
      defaultMode: keep
      names: {}
        # Authorization: redact
rbac:
  enabled: true
## Enable the /metrics endpoint, for now only supports prometheus
## set to true to enable metric collection by prometheus
metrics:
  prometheus:
    enabled: false
    # buckets: [0.1,0.3,1.2,5]
  datadog:
    enabled: false
    # address: localhost:8125
    # pushinterval: 10s
  statsd:
    enabled: false
    # address: localhost:8125
    # pushinterval: 10s
deployment:
  # podAnnotations:
  #   key: value
  hostPort:
    httpEnabled: false
    httpsEnabled: false
    dashboardEnabled: false
sendAnonymousUsage: true
tracing:
  enabled: false
  serviceName: traefik
  # backend: choices are jaeger, zipkin
  # jaeger:
  #   localAgentHostPort: "127.0.0.1:6831"
  #   samplingServerURL: http://localhost:5778/sampling
  #   samplingType: const
  #   samplingParam: 1.0
  # zipkin:
  #   httpEndpoint: http://localhost:9411/api/v1/spans
  #   debug: false
  #   sameSpan: false
  #   id128bit: true
