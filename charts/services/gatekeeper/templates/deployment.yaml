{{ $fullName := include "gatekeeper.fullname" . }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "gatekeeper.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "gatekeeper.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "gatekeeper.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "gatekeeper.selectorLabels" . | nindent 8 }}
    {{- if .Values.metrics.enabled }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /oauth/metrics
        prometheus.io/port: "3000"
    {{- end }}
    spec:
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      serviceAccountName: {{ include "gatekeeper.serviceAccountName" . }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - --config=/etc/gatekeeper/config.yaml
            - --client-id=$(CLIENT_ID)
            - --client-secret=$(CLIENT_SECRET)
            - --encryption-key=$(ENCRYPTION_KEY)
          {{- if .Values.metrics.enabled }}
            - --enable-metrics
          {{- end }}
          envFrom:
            - secretRef:
              {{- if eq .Values.config.existingSecret "" }}
                name: {{ $fullName }}
              {{- else }}
                name: {{ .Values.config.existingSecret }}
              {{- end }}
                optional: false
          volumeMounts:
            - name: config
              mountPath: /etc/gatekeeper/
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /oauth/health
              port: http
          readinessProbe:
            httpGet:
              path: /oauth/health
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: config
          configMap:
            name: {{ $fullName }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
