apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "calibre.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "calibre.labels" . | nindent 4 }}
spec:
  replicas: 1 # sqlite requires lock mounting
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "calibre.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "calibre.selectorLabels" . | nindent 8 }}
    spec:
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      serviceAccountName: {{ include "calibre.serviceAccountName" . }}
      containers:
        - name: nfs-sync
          securityContext:
            privileged: true
          image: ubuntu
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
          args:
            - >-
              dd if=/dev/zero of=/ramdisk/image.ext4 count=0 bs=1 seek=400M;
              mkfs.ext4 /ramdisk/image.ext4;
              mount /mnt/ramdisk-mount /ramdisk/image.ext4;
              cp -fvp /sqlite/*.* /mnt/ramdisk-mount;
              find /mnt/ramdisk-mount -maxdepth 1 -type f | xargs chown {{ .Values.config.puid }}:{{ .Values.config.pgid }};
              while true; do
                sleep {{ .Values.nfs.syncInterval }};
                sync /mnt/ramdisk-mount/*.*;
                fsfreeze --freeze /mnt/ramdisk-mount;
                sleep 10;
                echo "starting copy back to nfs... $(date -u)"
                cp -fv /mnt/ramdisk-mount/*.* /sqlite/;
                echo "finished copy back to nfs... $(date -u)"
                fsfreeze --unfreeze /mnt/ramdisk-mount;
              done;
          env:
            - name: PUID
              value: {{ .Values.config.puid | quote }}
            - name: PGID
              value: {{ .Values.config.pgid | quote }}
          lifecycle:
            preStop:
              exec:
                command:
                - umount /mnt/ramdisk-mount;
          volumeMounts:
            - name: ramdisk-mount
              mountPath: /mnt/ramdisk-mount
              mountPropagation: Bidirectional
            - name: ramdisk
              mountPath: /ramdisk
            - name: config
              mountPath: /sqlite
              subPath: app
          resources:
            {{- toYaml .Values.nfs.resources | nindent 12 }}
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: USE_CONFIG_DIR
              value: "true"
            - name: SET_CONTAINER_TIMEZONE
              value: "true"
            - name: CONTAINER_TIMEZONE
              value: {{ .Values.config.timezone }}
          volumeMounts:
            - name: ramdisk-mount
              mountPath: /calibre-web/app
              mountPropagation: HostToContainer
            - name: config
              mountPath: /calibre-web/app/vendor
              subPath: app/vendor
            - name: config
              mountPath: /calibre-web/app/test
              subPath: app/test
            - name: config
              mountPath: /calibre-web/app/cps
              subPath: app/cps
            - name: library
              mountPath: /books
            # TODO determine if this is even required
            - name: config
              mountPath: /calibre-web/config
              subPath: config
          ports:
            - name: http
              containerPort: 8083
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 15
            periodSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            initialDelaySeconds: 15
            periodSeconds: 5
            tcpSocket:
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: ramdisk
          emptyDir:
            medium: Memory
            sizeLimit: 400Mi
        - name: ramdisk-mount
          emptyDir: {}
        - name: config
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim }}
        - name: library
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingLibraryClaim }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
